#!/bin/sh
#
################################################################ LICENSE
#
# Copyright (c) 2012-2015 Michael Dexter <editor@callfortesting.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
############################################################ INFORMATION
#
# Title: virtual machine rc script
# Version: v.0.9

. /etc/rc.subr

name="vm"
rcvar="${name}_enable"
#load_rc_config "$name" # NB! What is this?
start_cmd=${name}_start
stop_cmd=${name}_stop
restart_cmd=${name}_restart
extra_commands="
        attach
	xattach
	dryrun
	dryruninstall
	install
        grub
	bhyve
	bhyveinstall
	xen
	xeninstall
" # END-QUOTE

# Removed extra commands
#       reset # Hard Stop and Start
#       status
#       debug # bhyve-only? Xen equivalent?
#       delete
#	mount
#	umount
#       reset # Hard Stop and Start
#       status
#       debug # bhyve-only?
#       delete # You sure?
#	jail, qemu, vbox


attach_cmd=${name}_attach
xattach_cmd=${name}_xattach
dryrun_cmd=${name}_start
dryruninstall_cmd=${name}_start
install_cmd=${name}_start
grub_cmd=${name}_start
bhyve_cmd=${name}_start
bhyveinstall_cmd=${name}_start
jail_cmd=${name}_start
xen_cmd=${name}_start
xeninstall_cmd=${name}_start

####################################################### SUPPORT FUNCTIONS

f_timestamp() # A simple timestamp for logging. Modify as desired.
{
echo $( date "+%Y-%m-%d %H:%M:%S:" )
}

f_info() # $1 # A redirectable replacement for echo for information reporting
# NB! f_info input must be surrounded by quotation marks
{
case $info_method in
        stdio) # Log to standard I/O
                echo $1 # Consider an echo or carriage return before
        ;;
        quiet) # Silence is golden
                true $1
        ;;
        logger) # Log to the system logger (console and /var/log/messages)
                logger "vmrc: $1"
# NB! A logfile and syslog would require a rework
esac
} # End f_info

f_error() # $1 # A redirectable replacement for echo for error reporting
# NB! f_info input must be surrounded by quotation marks
{
case $error_method in
        stdio) # Log to standard I/O
                echo $1 # Consider an echo or carriage return before
        ;;
        quiet) # Silence is golden
                true $1
        ;;
        logger) # Log to the system logger (console and /var/log/messages)
        logger vmrc: $1
# NB! A logfile and syslog would require a rework
esac
} # End f_error

f_readconf() # $1 # shell variables file # '.' source command with safety checks
{
# Preflight checks for '.' source command because it exits on failure
        [ -r $1 ] || return 1
        sh -n $1 >/dev/null 2>&1 || return 1
        . $1 >/dev/null 2>&1 || return 1
} # End f_readconf

f_check_vm_id_conflicts() # Check for conflicting VM IDs in $host_vmdir
{
local vm_id_list=""
        for vm_found in ${host_vmdir}/* ; do
                vm_name="${vm_found##*/}" # Remove path, leaving VM name
                vm_id=${vm_name##*[!0-9]} # Remove name, leaving VM ID

                [ -z $vm_id ] || vm_id_list="${vm_id_list}\n$vm_id" # A number
        done
        vm_id_list=$( echo -e $vm_id_list | sort -g | uniq -d ) # Find conflicts
[ "$vm_id_list" = "" ] || \
        { f_error "Conflicting VM IDs: ${vm_id_list}. Exiting" ; exit 1 ; }
} # End f_check_vm_id_conflicts

f_check_vm_started() # $1 # Check if a given VM name is started under any containre 
{
	vm_name="$1"

# NB! Making the reckless assumption that each container will have a process
# with vm_name in it for now
# Don't look for the rc.d startup process or the grep process

	if [ -e /dev/vmm/$vm_name ]; then
		return 0
	else
		return 1
	fi

	ps axwww | grep -v rc.d | grep -v grep | grep $vm_name >/dev/null 2>&1
	return $?

# NOTES
# NB! WE ARE ONLY RETURNING EXIT CODES, NO PRINTED MESSAGES HERE
# NB! We should be able to do this only by VM Name
# NB! TRY all supported hypervisors because of the ability to override them
# bhyve, Xen, VBox, jail, QEMU
# Leave a flag for loaded kernel-based hypervisors to quickly eliminate many

# Do not grep for the grep process grepping for the VM Name
#	ps ax | grep -v grep | grep -qw $vm_name && return 1

# NB! FYI on Xen ps ax:
# xl -vvvv create -c /vmrc/vm/fbsd101amd64_raw22/xen.cfg

} # End f_check_vm_started

f_limit1vm() # $vm_count # Only allow one VM to be specified for some functions
{
        case $vm_count in # Initialized in MAIN based on rc directives
        0) f_error "Please specify a single VM by name"
                exit 1
        ;;
        1) return 0
        ;;
        *) f_error "Please specify a single VM by name"
                exit 1
        esac
} # End f_limit1vm

#f_getmdname() # vm_name # Retrieve md(4) IDs associated with $1 ($vm_name)
#{
##       mdconfig -lv | awk -v vm_name="$1" \
##               '$0 ~ "^[^/]*/" vm_name "\.img$" { print $1 }'
#        local local_img_name=$1 # Takes vm_name, lacks `.img' suffix
#        mdconfig -lv | awk -v local_vmname="$local_img_name" '
#        {
#                md=$1
#                sub("^[^/]*", "")
#                if ($0 ~ "/" local_vmname "\.img$")
#                        print md
#        }'
#}

#f_mddestroy() # $1 ($vm_name) Destroy multiple md(4) IDs of $vm_name
#{
#        f_info "Destroying all memory devices associated with $1"
#        for dev in $( f_getmdname $1 ); do
#                f_info "Destroying mdconfig device $dev"
#                mdconfig -du "$dev"
#        done
#}

f_vm_prep() # $vm_name # Generates all VM config files and scripts
{
	# Setting $1 to vm_name for clarity
	vm_name="$1"
	vm_id=${vm_name##*[!0-9]} # Remove name, leaving VM ID

# ASSUMPTIONS: VM directory is ready and All VM variables are set in the shell

# One TRUTH TO FACE: If we rely ENTIRELY on scripts, we do a LOT
# of redundant things. Hmm. Easier checks without kldstat? (watch for /dev/vmm)
# Ideally, make it easy to back out!

# Generate sub scripts, generate start script containing them.

# Note gxemul, simh and docker

	case $vm_container in
		bhyve)
			# Boilerplate
			echo "#!/bin/sh" > $host_vmdir/$vm_name/$vm_container.sh
#			echo "ifconfig tap$vm_id create" \
#				>> $host_vmdir/$vm_name/$vm_container.sh

# NB! The bridge modifications can stall all networking. By checking for each
# device and only creating them if necessary, the operator can create them
# in /etc/rc.conf and this will automatically use them.

# Check for the bridge and create as needed
			echo "ifconfig bridge0 >/dev/null 2>&1 || \\" \
				>> $host_vmdir/$vm_name/$vm_container.sh
		echo "	{ ifconfig bridge0 create > /dev/null 2>&1 ; \\" \
				>> $host_vmdir/$vm_name/$vm_container.sh
echo "		ifconfig bridge0 addm $bridge0nic up > /dev/null 2>&1 ; }" \
                                >> $host_vmdir/$vm_name/$vm_container.sh

# Check for the tap device and create as needed
			echo "ifconfig tap$vm_id >/dev/null 2>&1 || \\" \
				>> $host_vmdir/$vm_name/$vm_container.sh
			echo "	ifconfig tap$vm_id create up >/dev/null 2>&1" \
				>> $host_vmdir/$vm_name/$vm_container.sh

# See if they are associated. How likely might they not be?
		echo "ifconfig bridge0 | grep tap$vm_id >/dev/null 2>&1 || \\" \
				>> $host_vmdir/$vm_name/$vm_container.sh
	echo "	ifconfig bridge0 addm tap$vm_id up > /dev/null 2>&1" \
				>> $host_vmdir/$vm_name/$vm_container.sh

# Begin vmrun.sh-style while loop, disabled for install_mode

			if [ ! "$install_mode" = "YES" ]; then
			echo "while [ 1 ]; do" >> \
				$host_vmdir/$vm_name/$vm_container.sh
			fi

			echo "	/usr/sbin/bhyvectl --vm=$vm_name --destroy" \
				>> $host_vmdir/$vm_name/$vm_container.sh

	case $bhyve_loader in
		bhyveload)

			case $install_mode in
# NB! This should probably check that we have valid install_methods
				YES) # Load install.iso|img
echo "  /usr/sbin/bhyveload -m $vm_ram -d $host_vmdir/$vm_name/install.$install_method $vm_name" >> $host_vmdir/$vm_name/$vm_container.sh
				;;
				*) # Load vm_boot_disk for normal boot mode
#					disk_type="${vm_boot_disk}_type"
foo="${vm_boot_disk}_type" ; eval disk_type=\$$foo ; foo=""

					case $disk_type in
						dev)
#					disk_device="${vm_boot_disk}_device"
foo="${vm_boot_disk}_device" ; eval disk_device=\$$foo ; foo=""

echo "  /usr/sbin/bhyveload -m $vm_ram -d $disk_device  $vm_name" >> $host_vmdir/$vm_name/$vm_container.sh
						;;
						img)
echo "  /usr/sbin/bhyveload -m $vm_ram -d $host_vmdir/$vm_name/${vm_boot_disk}.img $vm_name" >> $host_vmdir/$vm_name/$vm_container.sh
						;;
						zvol)
						;;
						iscsi)
						;;
						nfs)
						;;
					esac
				;;
			esac
		;; # End case bhyveload
		uefi)
			true # Nothing to do here (continue failed)
		;; # End case uefi

		grub-bhyve)

			case $install_mode in
# NB! This should probably check that we have valid install_methods
# NB! Assuming iso only for grub for now
                                YES) # Load install.iso|img
echo -e "$iso_grub_cfg" > $host_vmdir/$vm_name/grub.cfg

echo "(cd0) $host_vmdir/$vm_name/install.$install_method" \
	> $host_vmdir/$vm_name/device.map

echo "/usr/local/sbin/grub-bhyve $iso_grub_d $iso_grub_r -m $host_vmdir/$vm_name/device.map -M $vm_ram $vm_name" \
        >> $host_vmdir/$vm_name/$vm_container.sh
                                ;;
                                *) # Load vm_boot_disk for normal boot mode
#                                       disk_type="${vm_boot_disk}_type"
foo="${vm_boot_disk}_type" ; eval disk_type=\$$foo ; foo=""

                                        case $disk_type in
                                                dev)
foo="${vm_boot_disk}_device" ; eval disk_device=\$$foo ; foo=""

echo -e "$img_grub_cfg" > $host_vmdir/$vm_name/grub.cfg
echo "(hd0) $disk_device"  > $host_vmdir/$vm_name/device.map
                                                ;;
                                                img)
echo -e "$img_grub_cfg" > $host_vmdir/$vm_name/grub.cfg
# NB! Need to handle empty grub.cfg files
echo "(hd0) $host_vmdir/$vm_name/${vm_boot_disk}.img" \
        > $host_vmdir/$vm_name/device.map
                                                ;;
                                                zvol)
                                                ;;
                                                iscsi)
                                                ;;
                                                nfs)
                                                ;;
                                        esac
[ "$grub_mode" = "YES" ] && { img_grub_d="" ; img_grub_r="" ; } # Null for GRUB

echo "/usr/local/sbin/grub-bhyve $img_grub_d $img_grub_r -m $host_vmdir/$vm_name/device.map -M $vm_ram $vm_name" \
	>> $host_vmdir/$vm_name/$vm_container.sh
		;; # End case grub-bhyve
		*) f_error "bhyve_loader is not set. Skipping"
			return 1
		;;
	esac # End case $bhyve_loader
				;;
			esac # End case install_mode

echo "	/usr/sbin/bhyve -c $vm_cpus -m $vm_ram -H $bhyve_flags \\" \
	>> $host_vmdir/$vm_name/$vm_container.sh
echo "  	-s 0:0,${bhyve_hostbridge}hostbridge \\" \
	>> $host_vmdir/$vm_name/$vm_container.sh
echo "  	-s 31:0,lpc -l com1,stdio $bootrom \\" \
	>> $host_vmdir/$vm_name/$vm_container.sh

# NB! Multiple disk, NIC and passthrough acrobatics here
# NB! Should these be local variables?

# PCI Slot rule as of the Windows/UEFI arrival:
# Slots 3,4,5 and 6 for AHCI devices under EFI, 31 for LPC and virtio anywhere
# That would limit EFI VMs to four AHCI devices
# NOTE that EFI will currently only support the four AHCI PCI channels

next_slot="3" # 0 = hostbridge 31 = lpc onward = disks, nics, raw pci

disk_id="0" # Start with disk0. Increment until out of disks

disk_virtio=""
disk_type="$disk0_type" # Initialize for disk0 from config file
disk_device=""

while [ $disk_type ]; do # While a valid disk_(type) exists while incrementing

# NB! Can this be simplified to initialize disk_*_type to the current disk?
foo="disk${disk_id}_virtio" ; eval disk_virtio=\$$foo ; foo=""

	case $disk_type in
		dev)
		foo="disk${disk_id}_device" ; eval disk_device=\$$foo ; foo=""
echo "	-s $next_slot:0,$disk_virtio,$disk_device \\" \
        >> $host_vmdir/$vm_name/$vm_container.sh
f_info "You probably want sysctl kern.geom.debugflags=16 to do this"
		;;
		img)
echo "	-s $next_slot:0,$disk_virtio,$host_vmdir/$vm_name/disk${disk_id}.img \\" \
        >> $host_vmdir/$vm_name/$vm_container.sh
		;;
		zvol) f_error "Not yet implemented"
		;;
		iscsi) f_error "Not yet implemented"
		;;
		nfs) f_error "Not yet implemented"
		;;
	esac

disk_id=$((disk_id+1)) # Increment $disk
foo="disk${disk_id}_type" ; eval disk_type=\$$foo ; foo=""

# NB! Will disk_type be set to null if no next disk exists?
next_slot=$((next_slot+1)) # Increment $next_slot

done # This should exit when disk${disk}_type is undefined/does not exist

disk="" # Clear $disk just in case now that we are done with disks

# Still using $next_slot
	if [ "$install_mode" = "YES" ]; then

                        case $install_method in
                                iso) # NB! Would anyone want virtio-blk?
echo "	-s $next_slot:0,ahci-cd,$host_vmdir/$vm_name/install.iso \\" \
			>> $host_vmdir/$vm_name/$vm_container.sh
                                ;;
                                img) # NB! Would anyone want virtio-blk?
echo "	-s $next_slot:0,ahci-hd,$host_vmdir/$vm_name/install.img \\" \
			>> $host_vmdir/$vm_name/$vm_container.sh
                                ;;
				*)
				f_error "install_method is not set. Skipping"
				return 1 # Inadequate to exit loop!
                        esac
next_slot=$((next_slot+1)) # Increment $next_slot
	fi
# NB! One network device for now on tap<vm_id>
# Still using $next_slot

echo "	-s $next_slot:0,virtio-net,tap$vm_id \\" \
	>> $host_vmdir/$vm_name/$vm_container.sh

# NB! Then do PCI passthrough devices
# Still using $next_slot

next_slot="" # Clear next_slot just in case now that we finished PCI build up
# NB! Remember to clean them up as appropriate on exit
########################################################
echo "	$vm_name" \
	>> $host_vmdir/$vm_name/$vm_container.sh

if [ ! "$install_mode" = "YES" ]; then
	echo "	bhyve_exit=\$?" \
		>> $host_vmdir/$vm_name/$vm_container.sh
	echo "		if [ \$bhyve_exit -ne 0 ]; then" \
		>> $host_vmdir/$vm_name/$vm_container.sh
	echo "			break" \
		>> $host_vmdir/$vm_name/$vm_container.sh
	echo "		fi" \
		>> $host_vmdir/$vm_name/$vm_container.sh
	echo "done" \
		>> $host_vmdir/$vm_name/$vm_container.sh
fi # End vmrun.sh-sytle while loop. Perform cleanup on exit

echo "	/usr/sbin/bhyvectl --vm=$vm_name --destroy" \
	>> $host_vmdir/$vm_name/$vm_container.sh

# NB! Consider not destroying for now in a plan to check for them to avoid the
# network stall
echo "	#ifconfig tap$vm_id destroy" \
	>> $host_vmdir/$vm_name/$vm_container.sh

		;; # End case bhyve
		jail) f_error "Not yet implemented"
# NB! Must be mounted. Implement and check!
# What checks?
# Embed the check in the script? Remind to manually mount?
#echo "/usr/sbin/jail -c path=${host_vmdir}/$vm_name/mnt/ mount.devfs ip4.addr=$vm_ipv4 command=/bin/sh" \
#	> $host_vmdir/$vm_name/$vm_container.sh
		;; # End case jail
		qemu)

#NB! Note install mode
echo "#!/bin/sh" > $host_vmdir/$vm_name/$vm_container.sh
echo "/usr/local/bin/qemu-system-x86_64 -m $vm_ram -localtime \\" \
	>> $host_vmdir/$vm_name/$vm_container.sh
# NB! Set the boot disk
echo "$host_vmdir/$vm_name/disk0.img \\" \
	>> $host_vmdir/$vm_name/$vm_container.sh
echo "-vnc :$vm_id -usbdevice tablet" \
	>> $host_vmdir/$vm_name/$vm_container.sh

#/usr/local/bin/qemu-system-x86_64 -localtime -boot once=d -cdrom \
#$host_vmdir/$vm_names/${vm_names}.iso \
#$host_vmdir/$vm_names/${vm_names}.img \
#-m $vm_ram -vnc :$vm_id -usbdevice tablet &

#http://people.freebsd.org/~gjb/QEMU_EFI.fd

#qemu-system-aarch64 -m 4096M -cpu cortex-a57 -M virt \
#-bios QEMU_EFI.fd -serial -nographic \
#-drive if=none,file=arm64.qcow2,id=hd0 \
#-device virtio-blk-device,drive=hd0 \
#-device virtio-net-device,id=net0

		;; # End case qemu
		vbox) f_error "Not yet implemented"
		;; # End case vbox
		xen)

# NB! This is not yet verifying the presense of disks, if mounted, fscking them...

	echo "builder = \"hvm\"" > $host_vmdir/$vm_name/xen.cfg
	echo "memory = $vm_ram" >> $host_vmdir/$vm_name/xen.cfg
	echo "vcpus = $vm_cpus" >> $host_vmdir/$vm_name/xen.cfg
	echo "name = \"$vm_name\"" >> $host_vmdir/$vm_name/xen.cfg

# NB! Note iso vs. img install_mode methods. Assume iso only for now

# NB! This needs the multiple disk acrobatics
	case $install in
		YES)
	echo "disk = [ '$host_vmdir$vm_name/disk0.img,raw,hda,w', " >> \
		$host_vmdir/$vm_name/xen.cfg
	echo "'$host_vmdir$vm_name/install.iso,raw,hdc:cdrom,r' ]" >> \
		$host_vmdir/$vm_name/xen.cfg
	echo "boot = \"d\"" >> $host_vmdir/$vm_name/xen.cfg
		;;
		*)
	echo "disk = [ '$host_vmdir$vm_name/disk0.img,raw,hda,w' ]" >> \
		$host_vmdir/$vm_name/xen.cfg
	echo "boot = \"c\"" >> $host_vmdir/$vm_name/xen.cfg
	esac

#vif = ['ip = "10.10.10.13", bridge=bridge0' ] NOTE our FreeBSD variable
# NB! Do we need to manage tap devices like bhyve? Looks like it is auto-created
# on the host

	echo "vif = [ 'bridge=bridge0' ]" >> $host_vmdir/$vm_name/xen.cfg
	echo "vnc = 1" >> $host_vmdir/$vm_name/xen.cfg
	echo "vncdisplay = $vm_id" >> $host_vmdir/$vm_name/xen.cfg
	echo "vnclisten = \"$vnc_ip\"" >> $host_vmdir/$vm_name/xen.cfg
	echo "serial = \"pty\"" >> $host_vmdir/$vm_name/xen.cfg
	echo "usbdevice = \"tablet\"" >> $host_vmdir/$vm_name/xen.cfg
	echo "on_poweroff = \"destroy\"" >> $host_vmdir/$vm_name/xen.cfg
	echo "on_reboot = \"restart\"" >> $host_vmdir/$vm_name/xen.cfg
	echo "on_crash = \"restart\"" >> $host_vmdir/$vm_name/xen.cfg
	echo "acpi = 1" >> $host_vmdir/$vm_name/xen.cfg

# NB! Note that -c tries to connect to the serial console and we want that
# Should the script contain checks for say, devices?
		echo "#!/bin/sh" > $host_vmdir/$vm_name/$vm_container.sh
		echo "kldload if_tap" >> $host_vmdir/$vm_name/$vm_container.sh
		echo "kldload bridgestp" \
			>> $host_vmdir/$vm_name/$vm_container.sh
# NB! These should all test for network resources, no?
# NB! Why this? Supposed to be a test that bridge0 exists?
#		echo "ifconfig bridge0 >/dev/null 2>&1 || \\" \
#			>> $host_vmdir/$vm_name/$vm_container.sh
		echo "ifconfig bridge0 create up" \
			>> $host_vmdir/$vm_name/$vm_container.sh
		echo "ifconfig bridge0 addm $bridge0 SYNCDHCP" \
			>> $host_vmdir/$vm_name/$vm_container.sh

		echo "xl -vvvv create -c $host_vmdir$vm_name/xen.cfg" \
			>> $host_vmdir/$vm_name/$vm_container.sh
		;; # End case xen
	esac
} # End f_vm_prep

f_vm_boot() # $vm_name # Executes VM boot scripts and thus desired console
{
# NB! If this is ALWAYS called after f_vm_prep, then all variables will
# remain set. If there is any question, re-set them/read config etc.
	vm_name="$1"
#	vm_id=${1##*[!0-9]}

	[ "$dryrun" = "" ] || { f_info "Dry run, no boot" ; return 1 ; }

# First come, first serve hypervisor check. Consider tracking identified ones.
	case $vm_container in
		xen)
			test -d /dev/xen || \
		{ f_error "Xen kernel not loaded. Skipping" ; return 1 ; }	
# Network load here? Tap?
# Assuming NO loading in the scripts for now.
		;; # End case xen
		bhyve)
			test -d /dev/xen && \
		{ f_error "Xen kernel is loaded. Skipping" ; return 1 ; }
			kldstat | grep -qw vboxdrv.ko && \
		{ f_error "VirtualBox is loaded. Skipping" ; return 1 ; }
# Skipping an EPT check
			kldstat | grep -qw vmm.ko || \
		{ f_info "Loading the bhyve kernel module" ; kldload vmm ; }
# Skipping a modules load verification
# if_tap! bridgestp!
f_info "You might want sysctl -w net.link.tap.up_on_open=1"
f_info "sysctl -w net.link.tap.user_open=1"
		;; # End case bhyve
# kqemu.ko? vboxdrv.ko! 
	esac

	f_info "Booting $vm_name"

	case $vm_console in
		nmdm)
		f_error "Not yet implemented"
		;; # End case nmdm
		tmux)
f_info "Booting $vm_name in a tmux session"
/usr/local/bin/tmux new -d -s $vm_name "/bin/sh $host_vmdir$vm_name/${vm_container}.sh"

# NB! Test if we need >/dev/null 2>&1
		;; # End case tmux
		screen)
f_info "Booting $vm_name in a screen session"
		f_error "Need to test this"
	/usr/local/bin/screen -dmS $vm_name /bin/sh $host_vmdir$vm_name/${vm_container}.sh

		;; # End case screen
		*) f_error "vm_console is not set for $vm_name" ; return 1 ;
# NB! Verify this error behavior
	esac
 
} # End f_vm_boot

f_start_exit() # Uses global $vm_count # Conditional exit for f_start
{
	case $vm_count in
		0) continue
		;;
		1) exit 1
		;;
		*) exit 1
		;;
	esac
} # End f_start_exit

f_start() # $vm_name # Called in a loop for all VMs or for one VM
{

# NB! All overrides are aliased to "start|onestart" and must be handled here
# Problem: We want to continue on error for all VMs and exit if one VM
# f_start_exit handles the code BUT, all say "Skipping" though may be exiting

	vm_name="$1"
	vm_id=${vm_name##*[!0-9]} # Remove name, leaving VM ID

	[ -z $vm_id ] && { f_error "$vm_name is not numbered. Skipping" ; \
		f_start_exit ; }

	f_info "Checking if $vm_name is already started"
	f_check_vm_started $vm_name && \
	{ f_error "VM $vm_name is already started. Skipping" ; f_start_exit ; }

# Reminder: We have only used $vm_name and $vm_id so far

	f_info "Reading config file for $vm_name"
# Clear all variables by reading the master template. Exit on error
	f_readconf ${host_templates}/master_template || \
{ f_error "${host_templates}/master_template failed to parse. Exiting" ; \
	exit 1 ; }

# Read the VM config file. Continue on error
	f_readconf ${host_vmdir}/${vm_name}/${vm_name}.conf || \
	{ f_error "${vm_name}.conf failed to parse. Skipping" ; \
		f_start_exit ; }

# Re-read the vm.conf file in case VM attempted to override it. Exit on error
# Note that vm.conf was sourced when the script first executed

	f_readconf /usr/local/etc/vm.conf || \
	{ f_error "/usr/local/etc/vm.conf failed to parse. Exiting" ; \
		exit 1 ; }

	if [ $vm_count = "0" ]; then # Check "start all"
		[ "$vm_autoboot" = "YES" -o "$vm_autoboot" = "yes" ] || \
	        { f_error "$vm_name is disabled. Skipping" ; f_start_exit ; }
	fi

	f_info "Generating the config files and scripts for $vm_name"

# NB! TEST REQUIRED VARIABLES Note that most are validated later

[ -z $vm_cpus ] && { f_error "vm_cpus is not set. Skipping" ; return 1 ; }
	[ "$vm_cpus" -gt 0 ] >/dev/null 2>&1 || \
		{ f_error "vm_cpus is not a valid number" ; return 1 ; }

	[ -z $vm_ram ] && { f_error "vm_ram is not set. Skipping" ; return 1 ; }

	[ "$vm_ram" -gt 0 ] >/dev/null 2>&1 || \
		{ f_error "vm_ram is not a valid number" ;  return 1 ; }
[ -z $vm_console ] && { f_error "vm_console is not set. Skipping" ; return 1 ; }
	[ -z $vm_container ] && \
		{ f_error "vm_container is not set. Skipping" ; return 1 ; }

# Check disk0_type because we will use disk_type for the loop
[ -z $disk0_type ] && { f_error "disk0_type is not set. Skipping" ; return 1 ; }

disk_id="0" # Start with disk0. Increment until out of disks

foo="disk${disk_id}_type" ; eval disk_type=\$$foo ; foo=""

[ -z $disk_type ] && \
	{ f_error "disk${disk_id}_type is not set. Skipping" ; return 1 ; }

while [ $disk_type ]; do
	foo="disk${disk_id}_virtio" ; eval disk_virtio=\$$foo ; foo=""
	[ -z $disk_virtio ] && \
	{ f_error "disk${disk_id}_virtio is not set. Skipping" ; return 1 ; }

	case $disk_type in
		dev)
		foo="disk${disk_id}_device" ; eval disk_device=\$$foo ; foo=""
			[ -z $disk_device ] || \
	{ f_error "disk${disk_id}_device is not set. Skipping" ; return 1 ; }
		;;
		img)
			[ -r $host_vmdir/$vm_name/disk${disk_id}.img ] || \
{ f_error "$host_vmdir/$vm_name/disk${disk_id}.img is missing. Skipping" ; \
	return 1 ; }
		;;
		zvol)
			[ -c /dev/zvol/$host_zpool/$vm_name ] || \
{ f_error "/dev/zvol/$host_zpool/$vm_name is missing. Skipping" ; return 1 ; }
		;;
		iscsi)
		;;
		nfs)
		;;	
	esac

	disk_virtio=""
	disk_device=""
	disk_id=$((disk_id+1)) # Increment $disk_id
	foo="disk${disk_id}_type" ; eval disk_type=\$$foo ; foo=""
done # $disk_type while loop

disk_type=""

# SET RUNTIME OVERRIDES

	dryrun=""
	dryruninstall=""
	grub_mode=""
#	uefi="" # Unused?
	install_mode=""

	case $vm_cmd in # Note that only one override is possible at a time
		dryrun|onedryrun) dryrun="YES"
		;;
		dryruninstall|onedryruninstall)
			dryrun="YES"
			install_mode="YES"
		;;
		grub|onegrub) grub_mode="YES"
		;;
#		uefi|oneuefi) uefi="YES"
#		;;
		install|oneinstall) install_mode="YES"
		;;
		bhyve|onebhyve) vm_container="bhyve"
		;;
		bhyveinstall|onebhyveinstall)
			vm_container="bhyve"
			install_mode="YES"
		;;
#		jail|onejail) vm_container="jail"
#		;;
#		qemu|oneqemu) vm_container="qemu"
#		;;
#		vbox|onevbox) vm_container="vbox"
#		;;
#		xen|onexen) vm_container="xen"
#		;;
	xeninstall|onexeninstall) vm_container="xen" ; install_mode="YES"
		;;
	esac

	# Call the function that prepares all configuration files and scripts
	f_vm_prep $vm_name

	f_info "Starting $vm_name with the desired console and $vm_container"

	# Call the function that calls the scripts with the console of choice
	f_vm_boot $vm_name

	# Crazy prevoius method:
	#		/bin/sh /usr/local/etc/rc.d/vm onestart $vm_name

	# NOTES for generating config files and scripts
	#	[ $vm_hypervisor ] || \
	#	{ f_error "VM hypervisor not set in $host_vmdir/$vm_names/${vm_names}.conf. Skipping" ; return 1 ; }

# VEIRFY THAT WE LATER CHECK WHAT WE DID NOT CHECK HERE
	
#	[ $vm_os_type ] || \
	#	{ f_error "No VM OS type set in $host_vmdir/$vm_names/${vm_names}.conf. Skipping" ; return 1 ; }

	} # End f_start

	f_stop() # $vm_name # Called in a loop for all VMs or for one VM
	{
		vm_name="$1"
		vm_id=${vm_name##*[!0-9]} # Remove name, leaving VM ID

	[ -z $vm_id ] && { f_error "$vm_name is not numbered. Skipping" ; \
			f_start_exit ; }

# NB! We must rely on vm_name because of the ability to override the container

		if [ -d /dev/vmm ]; then

			vm_pid=$( ps axwww | grep -v grep | \
			grep "bhyve: $vm_name (bhyve)" | \
			awk '{ print $1 }' )

			if [ ! $vm_pid = "" ]; then # Is there a bhyve pid?

			f_info "Sending ACPI shutdown to $vm_name"
			f_info "Termininating bhyve PID $vm_pid"
			kill -TERM $vm_pid

			f_info "Sleeping 10 seconds for ACPI shutdown"
			sleep 10
	# NB! Experiment with this, get feedback

			f_info "Sending ACPI poweroff to $vm_name"
			/usr/sbin/bhyvectl --force-poweroff --vm=$vm_name

	fi # No bhyve process running for the VM, continue the teardown...

			f_info "Destroying $vm_name with bhyvectl"
		/usr/sbin/bhyvectl --destroy --vm=$vm_name >/dev/null 2>&1

		f_info "Destroying tap$vm_id"
		ifconfig tap$vm_id destroy >/dev/null 2>&1
# NB! Sweep for more tap devices when multiple NIC support is restored

	elif [ -d /dev/xen ]; then

		f_info "Stopping $vm_name with xl shutdown"
		/usr/local/sbin/xl shutdown $vm_name
# NB! Perhaps sleep and check for shutdown. Destroy if not gone
		f_info "Destroying $vm_name with xl destroy" ; \
		/usr/local/sbin/xl destroy $vm_name
	else

# NB! What emulators have intelligent destroys? Note jail commands

#	f_info "Displaying processes for $vm_name for the user to handle"
#	ps axwww | grep -v grep | grep $vm_name

	fi
} # End f_stop

f_attach() # $vm_name # Attach to a VM text console
{
	vm_name="$1"
	f_readconf $host_vmdir${vm_name}/${vm_name}.conf

	case $vm_console in
		nmdm)
			f_error "Not yet implmented"
#			vm_id=${1##*[!0-9]}
#			[ -e "/dev/nmdm${vm_id}B" ] || \
#			{ f_info "nmdm device not found. Exiting" ; exit 1 ; }
#			f_error "Detach: \" \~ CTRL-d \""
#			/usr/bin/cu -l "/dev/nmdm${vm_id}B" -s 9600
		;; # End case nmdm
		tmux)
			f_info "Detach: \" CTRL-b d \""
			export TERM=xterm
			/usr/local/bin/tmux attach-session -t $vm_name
		;; # End case tmux
		screen)
			f_info "Detach: \" C-a DD \""
			export TERM=xterm
			/usr/local/bin/screen -d -r $vm_name
# NB! test screen!
		;;
		*) f_error "vm_console is not set. Skipping"
			return 1
		;; # End case screen
	esac
} # End f_attach

f_xattach() # $vm_name # Attach to a VM Xconsole
{
	vm_name="$1"
	vm_id=${1##*[!0-9]}

	f_readconf $host_vmdir${vm_name}/${vm_name}.conf

	case $vm_xconsole in
		vnc)
# NB! This is throwing errors
# /usr/local/bin/xhost:  unable to open display ":0.0"
# No protocol specified
# Error: Can't open display: :0.0

			export DISPLAY=':0.0'
			/usr/local/bin/xhost +local:root
			export XAUTHORITY=~/.Xauthority
			/usr/local/bin/vncviewer $vnc_ip:$vm_id
		;; # End case vnc
		rdp)
			f_error "Not yet implemented"
#xfreerdp /v:$vm_ip /u:Administrator /p:Test123
		;; # End case rdp
		*) f_error "vm_xconsole is not set"
        esac
} # End f_xattach

f_mount()
{
	f_error "Not yet implemented"
} # End f_mount
##################################################### END SUPPORT FUNCTIONS

########################## LOOPING RC ARGUMENT FUNCTIONS (start, stop etc.)
# (Operate on all VMs if none specified or a single VM)

vm_start() # $vm_names and uses globals $vm_count $host_vmdir
{
# NB! VMs start alphabetically, not by VM ID
        case $vm_count in
        0)
		# Immediately eliminate overrides. Same behavior as limit1vm
		case $vm_cmd in
# NB! Keep these updated
dryrun|onedryrun|grub|onegrub|install|oneinstall|bhyve|onebhyve|xen|onexen)
			f_error "Please specify a single VM by name. Exiting"
                	exit 1
		esac

		f_info "Starting all VMs in $host_vmdir"
                if [ $( ls $host_vmdir | wc -l ) = 0 ]; then
                        f_error "No VMs found. Exiting"
                        exit 1
                fi

                f_info "Checking for conflicting VM IDs"
                f_check_vm_id_conflicts

	        for vm_found in ${host_vmdir}/* ; do
#       	        vm_id="" # Unset just in case
                	vm_name="${vm_found##*/}" # Remove path, leaving VM name
                	f_start $vm_name
		done
;;
# NB! Reword "Parsing..."
        1) f_info "Parsing $vm_names" # One name provided
		f_start $vm_names
;;
        *) f_info "Specify a single VM by name or none to start all VMs"
                exit 1
        esac       

} # End vm_start

vm_stop() # $vm_names
{
	case $vm_count in
		0) f_info "Stopping all VMs in $host_vmdir"
                	for vm_found in ${host_vmdir}/* ; do
				vm_name="${vm_found##*/}"
				f_stop $vm_name
	                done
		;;
		1) f_info "Stopping $vm_names" # One name provided
			f_stop $vm_names
		;;
		*) f_info "Specify a single VM by name or none to stop all VMs"
			exit 1
	esac
} # End vm_stop

vm_restart() # TBD
{
# standard rc argument unless it automatically calls stop and start
	echo Wish we were restarting
} # End vm_restart

######################################## NON-LOOPING RC ARGUEMENT FUNCTIONS
 
vm_attach() # $vm_names # Attach to a VM text console
{
	f_limit1vm $vm_count
        f_info "Attaching $vm_names"
	f_attach $vm_names
} # End vm_attach

vm_xattach() # $vm_names # Attach to a VM Xconsole
{
        f_limit1vm $vm_count
        f_info "Attaching $vm_names"
        f_xattach $vm_names
} # End vm_xattach

#vm_debug() # Display debugging information
#{
#	f_limit1vm $vm_count
## NB! Check if bhyve, if not, skip, or expand to all HVs
#	f_info "Displaying debug information for $vm_names"
#                [ -e /dev/vmm/$vm_names ] ||
#                f_error "$vm_names is not loaded"
#                /usr/sbin/bhyvectl --get-all --vm=$vm_names
#} # End vm_debug

vm_mount() # $vm_names
{
	f_limit1vm $vm_count

#	Check if started
	info "Verifying if $vm_names is already mounted on $host_vmdir$vm_names/mnt"
                mount | grep -qw $vm_names/mnt && \
                { f_error "$vm_names is mounted. Skipping" ; return 1 ; }
	f_info "Attempting to mount $host_vmdir/$vm_names/mnt"
	f_mount $vm_names
} # End vm_mount

# NB! Could mount and umount be combined and we rely on vm_cmd?
vm_umount() # $vm_names ($1)
{
	f_limit1vm $vm_count
	f_info "Unmounting $host_vmdir/$vm_names/mnt"
	f_umount $vm_names
} # End vm_umount

############################################################## END FUNCTIONS

############################################################# MAIN OPERATION

# Preserving $1, $* and $# in meaningful ways
vm_cmd="$1" # the rc directive, "start", "stop" etc.
[ $# -gt 0 ] && shift 1 # strip off the rc command, leaving string of VMs
vm_names="$*" # all VM to act on (preserve $*) DO NOT RE-INITIALIZE
# NB! This is easily confused with vm_name. Maybe vm_list, sometimes singular?
vm_count="$#" # number of vm's passed in (preserve $#) DO NOT RE-INITIALIZE


# Manually sourcing vm.conf because it contains the f_info|error settings
# See f_readconf
# NB! Echo or log that we are running (info|error_method is not set yet)
[ -f /usr/local/etc/vm.conf ] || \
	{ echo /usr/local/etc/vm.conf does not exist. Exiting ; exit 1 ; }
[ -r /usr/local/etc/vm.conf ] || \
	{ echo /usr/local/etc/vm.conf is not readable. Exiting ; exit 1 ; }
sh -n /usr/local/etc/vm.conf >/dev/null 2>&1 || \
	{ echo /usr/local/etc/vm.conf failed to parse. Exiting ; exit 1 ; }
. /usr/local/etc/vm.conf >/dev/null 2>&1 || \
	{ echo /usr/local/etc/vm.conf failed to source. Exiting ; exit 1 ; }

# Test 1: Verify if the host_vmdir set in vm.conf is readable (exists)
[ -r $host_vmdir ] || \
        { echo $host_vmdir is not readable. Exiting ; exit 1 ; }
# NB! Verify this test

# RC BOILERPLATE

load_rc_config $name

: ${vm_enable:="NO"}

run_rc_command "$vm_cmd"

