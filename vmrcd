#!/bin/sh
#
################################################################ LICENSE
#
# Copyright (c) 2015 Michael Dexter <editor@callfortesting.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
############################################################ INFORMATION
#
# Title: virtual machine rc script web daemon
# Version: v.0.9

# This is a simple http responder called by inetd that allows one to list,
# start and stop vmrc virtual machines plus edit their configuration files.
#
# This is strictly to assist local testing such as on your laptop and you would
# be made to use it on any system exposed to the Internet. You have been warned.
#
# It is expected to reside in /vmrc/vmrcd
#
# Enable it by adding the following line to /etc/inetd.conf :
#
# www stream tcp nowait root /vmrc/vmrcd vmrcd
#
# Start inetd and it should be availble at http://0.0.0.0
#
# This requires https://github.com/yudai/gotty for the web tty
#
# It is not yet secured in any way and keep in mind that to run any bhyve, Xen,
# QEMU, Jail, VirtualBox or similar containment environment will eventually
# require one or more commands to be executed with root priviliges. You could
# consider a web interface that only sets configuration details and leaves a
# breadcrumb for a separate service that watches for changes and acts upon them.
# Otherwise, a dedicated vmrc or similar user should be created with fine
# grained permissions and priviliges.
#
# Rephrased, no one in their right mind would use a root-priviliged shell-based
# web interface to a virtualization system.
#
# To begin with, the user would need to be able to run:
#
# ifconfig, bhyve, bhyveload, bhyvectl, grub-bhyve, xl, vm, vmrcd, mkvm.sh
#
# And write to: /vmrc/*
#
# Do not panic that it is not run by lighttpd, nginx, apache or other familiar
# httpd. If you are expecting tens of thousands of connections per second to
# your virtual machine management interface, you are doing something very wrong.
#
# This uses CGI syntax to pass information between previous pages to new pages.
#
# All URLs can be found in the case statement at the end along with a CSS URL.
#
# WARNING: This will wipe out most configuration settigns if you edit any.

f_readconf() # $1 # shell variables file # '.' source command with safety checks
{
# From vmrc 'vm'
	[ -f $1 ] || { f_500 "$1 does not exist" ; return 1 ; }
	[ -r $1 ] || { f_500 "$1 is not readable" ; return 1 ; }
	sh -n $1 >/dev/null 2>&1 || { f_500 "$1 will not parse" ; return 1 ; }
	. $1 >/dev/null 2>&1 || { f_500 "$1 will not source" ; return 1 ; }
} # End f_readconf

f_404() # Splat a 404 error message
{
echo -e "HTTP/1.1 404 (Not Found)\r\n"
cat << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html>
<head>
	<meta charset=utf-8>
	<title>Error 404 (Not Found)</title>
	<link rel="stylesheet" href="/css" type="text/css">
</head>
<body><p>Error 404 File not found!<br>URL: $url<br>Path: $path<br>Query: $query</p></body>
</html>
EOF
exit 1
}

f_500() # $error_message # Splat a 500 error message
{
echo -e "HTTP/1.1 500 (Internal Server Error)\r\n"
cat << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html>
<head>
	<meta charset=utf-8>
	<title>Error 500 (Internal Server Error)</title>
	<link rel="stylesheet" href="/css" type="text/css">
</head>
<body><p>Error 500 Internal Server Error: $1<br> URL: $url<br>Path: $path<br>Query: $query</p></body>
</html>
EOF
exit 1
} # End f_500

f_main_menu()
{
echo -e "HTTP/1.1 200 OK\r\n"
cat << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<title>vmrc Main Menu</title>
	<link rel="stylesheet" href="/css" type="text/css">
</head>
<body>
<h1>vmrc Virtual Machines</h1>
<table>
<tr>
<td>VM Name</td><td>Container</td><td>RAM</td><td>Action</atd>
EOF

	for vm_found in ${host_vmdir}/* ; do
		vm_name="${vm_found##*/}" # Remove path, leaving VM name
		f_readconf ${host_vmdir}/${vm_name}/${vm_name}.conf || continue
# NB! Verify continue behavior

echo "<tr>"
echo "<td>$vm_name</td><td>$vm_container</td><td>$vm_ram</td><td><a href="/status?vm_name=$vm_name">Status</a></td>"
echo "</tr>"
f_readconf ${host_templates}/master_template || \
	f_500 "master_template failed to read"
	done
cat << EOF
</table>
</body>
</html>
EOF
exit 0
} # End f_main_menu

f_status()
{
	eval $query
	f_readconf ${host_vmdir}/${vm_name}/${vm_name}.conf || \
		f_500 "${host_vmdir}/${vm_name}/${vm_name}.conf failed to read"

echo -e "HTTP/1.1 200 OK\r\n"
cat << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<title>$vm_name Status</title>
	<link rel="stylesheet" href="/css" type="text/css">
</head>
<body>

<h1>Status for VM $vm_name</h1>
EOF

case $vm_container in
	bhyve)
		if [ -e /dev/vmm/$vm_name ]; then
			echo "<p>bhyve VM $vm_name is started</p>"
		else
			echo "<p>bhyve VM $vm_name is not started</p>"
		fi
	;;
	*)
		ps axwww | grep -v rc.d | grep -v grep | \
			grep $vm_name > /dev/null 2>&1 ; ec=$?
		if [ "$ec" -eq 0 ]; then
	echo "<p>$vm_container VM $vm_name appears to be running</p>"	
		else
	echo "<p>$vm_container VM $vm_name does not appear to be running</p>"
		fi
# NB! Verify this test with all containers!
	;;
esac

        vm_id=${vm_name##*[!0-9]} # Remove name, leaving VM ID
        console_port="8$(printf "%03i" "$vm_id")"

cat << EOF
<a href="/status?vm_name=$vm_name">Refresh</a>
<a href="/">Main Menu</a>
<a href="/edit?vm_name=$vm_name">Edit Configuration</a>
<a href="/start?vm_name=$vm_name">Start</a>
<a href="/grub?vm_name=$vm_name">GRUB</a>
<a href="/install?vm_name=$vm_name">Start Installation</a>
<a href="/stop?vm_name=$vm_name">Stop</a>
<!-- <a href="/start_console?vm_name=$vm_name">Start Console</a> -->
<a href="http://0.0.0.0:$console_port">Attach to Console</a>
<!-- <a href="/stop_console?vm_name=$vm_name">Stop Console</a> -->

</body>
</html>
EOF
exit 0
} # End f_status

f_edit()
{
	eval $query
	f_readconf ${host_vmdir}/${vm_name}/${vm_name}.conf || \
		f_500 "${host_vmdir}/${vm_name}/${vm_name}.conf failed to read"

echo -e "HTTP/1.1 200 OK\r\n"
cat << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<title>Editing $vm_name</title>
	<link rel="stylesheet" href="/css" type="text/css">
</head>
<body>

<h1>Edting VM $vm_name</h1>
<form action="/update" method="get">

<input type="hidden" name="vm_name" value="$vm_name">

<table>
<!-- <tr><td>VM Autoboot:</td><td>
	<select name=vm_autoboot>
		<option></option>
		<option>YES</option>
	</select></td></tr> NOPE! We don't want defaults
-->
<tr><td>VM Autoboot:</td><td><input type="text" size="40" name="vm_autoboot" value="$vm_autoboot"></input></td></tr>
<tr><td>Install Method:</td><td><input type="text" size="40" name="install_method" value="$install_method"></input></td></tr>
<tr><td>VM CPUs:</td><td><input type="text" size="40" name="vm_cpus" value="$vm_cpus"></input></td></tr>
<tr><td>VM RAM:</td><td><input type="text" size="40" name="vm_ram" value="$vm_ram"></input></td></tr>
<tr><td>VM Console:</td><td><input type="text" size="40" name="vm_console" value="$vm_console"></input></td></tr>
<tr><td>VM XConsole:</td><td><input type="text" size="40" name="vm_xconsole" value="$vm_xconsole"></input></td></tr>
<tr><td>VM Container:</td><td><input type="text" size="40" name="vm_container" value="$vm_container"></input></td></tr>
<tr><td>VM Loader:</td><td><input type="text" size="40" name="bhyve_loader" value="$bhyve_loader"></input></td></tr>
<tr><td>bhyve Hostbridge:</td><td><input type="text" size="40" name="bhyve_hostbridge" value="$bhyve_hostbridge"></input></td></tr>
<tr><td>bhyve Flags:</td><td><input type="text" size="40" name="bhyve_flags" value="$bhyve_flags"></input></td></tr>
<tr><td>BootROM:</td><td><input type="text" size="40" name="bootrom" value="$bootrom"></input></td></tr>
<tr><td>VM Boot Disk:</td><td><input type="text" size="40" name="vm_boot_disk" value="$vm_boot_disk"></input></td></tr>
<tr><td>disk0_virtio:</td><td><input type="text" size="40" name="disk0_virtio" value="$disk0_virtio"></input></td></tr>
<tr><td>disk0 Type:</td><td><input type="text" size="40" name="disk0_type" value="$disk0_type"></input></td></tr>
<tr><td>disk0 Device:</td><td><input type="text" size="40" name="disk0_device" value="$disk0_device"></input></td></tr>
<tr><td>ISO GRUB Config:</td><td><input type="text" size="40" name="iso_grub_cfg" value="$iso_grub_cfg"></input></td></tr>
<tr><td>ISO GRUB -d:</td><td><input type="text" size="40" name="iso_grub_d" value="$iso_grub_d"></input></td></tr>
<tr><td>ISO GRUB -r:</td><td><input type="text" size="40" name="iso_grub_r" value="$iso_grub_r"></input></td></tr>
<tr><td>IMG GRUB Config:</td><td><input type="text" size="40" name="img_grub_cfg" value="$img_grub_cfg"></input></td></tr>
<tr><td>IMG GRUB -d:</td><td><input type="text" size="40" name="img_grub_d" value="$img_grub_d"></input></td></tr>
<tr><td>IMG GRUB -r:</td><td><input type="text" size="40" name="img_grub_r" value="$img_grub_r"></input></td></tr>
</table>
<br>
<input type="submit">

<a href="/">Cancel</a>
</body>
</html>
EOF
exit 0
} # End f_edit

f_update() # Called by f_edit with all VM configuration variables
{
OldIFS="$IFS"
IFS="&"
for query_value in $query ; do
	eval $query_value
done
IFS="$OldIFS"

[ -f ${host_vmdir}/${vm_name}/${vm_name}.conf ] && \
	mv ${host_vmdir}/${vm_name}/${vm_name}.conf \
	${host_vmdir}/${vm_name}/${vm_name}.conf.$timestamp

config_file="${host_vmdir}/${vm_name}/${vm_name}.conf"

echo "vm_autoboot=\"$vm_autoboot\"" > $config_file
echo "install_method=\"$install_method\"" > $config_file
echo "vm_cpus=\"$vm_cpus\"" >> $config_file
echo "vm_ram=\"$vm_ram\"" >> $config_file
echo "vm_console=\"$vm_console\"" >> $config_file
echo "vm_xconsole=\"$vm_xconsole\"" >> $config_file
echo "vm_container=\"$vm_container\"" >> $config_file
echo "bhyve_loader=\"$bhyve_loader\"" >> $config_file
echo "bhyve_hostbridge=\"$bhyve_hostbridge\"" >> $config_file
echo "bhyve_flags=\"$bhyve_flags\"" | sed 's/+/ /g' >> $config_file
echo "bootrom=\"$bootrom\"" | \
sed 's/+/ /g; s/%2F/\//g; s/%2C/,/g' >> $config_file
echo "vm_boot_disk=\"$vm_boot_disk\"" >> $config_file
echo "disk0_virtio=\"$disk0_virtio\"" >> $config_file
echo "disk0_type=\"$disk0_type\"" >> $config_file
echo "disk0_device=\"$disk0_device\"" | sed 's/%2F/\//g' >> $config_file
echo "iso_grub_cfg=\"$iso_grub_cfg\"" | \
sed 's/+/ /g; s/%28/(/g; s/%29/)/g; s/%2F/\//g; s/%5C/\\/g; s/%2C/,/g' >> $config_file
echo "iso_grub_d=\"$iso_grub_d\"" | \
sed 's/+/ /g; s/%28/(/g; s/%29/)/g; s/%2F/\//g; s/%5C/\\/g; s/%2C/,/g' >> $config_file
echo "iso_grub_r=\"$iso_grub_r\"" | \
sed 's/+/ /g; s/%28/(/g; s/%29/)/g; s/%2F/\//g; s/%5C/\\/g; s/%2C/,/g' >> $config_file
echo "img_grub_cfg=\"$img_grub_cfg\"" | \
sed 's/+/ /g; s/%28/(/g; s/%29/)/g; s/%2F/\//g; s/%5C/\\/g; s/%2C/,/g' >> $config_file
echo "img_grub_d=\"$img_grub_d\"" | \
sed 's/+/ /g; s/%28/(/g; s/%29/)/g; s/%2F/\//g; s/%5C/\\/g; s/%2C/,/g' >> $config_file
echo "img_grub_r=\"$img_grub_r\"" | \
sed 's/+/ /g; s/%28/(/g; s/%29/)/g; s/%2F/\//g; s/%5C/\\/g; s/%2C/,/g' >> $config_file

echo -e "HTTP/1.1 200 OK\r\n"
cat << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<title>Update results for $vm_name</title>
	<link rel="stylesheet" href="/css" type="text/css">
</head>
<body>

<h1>Updated configuration file for $vm_name</h1>
<pre>
EOF
cat ${host_vmdir}/${vm_name}/${vm_name}.conf
cat << EOF
</pre>
<a href="/edit?vm_name=$vm_name">Edit</a>
<a href="/status?vm_name=$vm_name">Status</a>
<a href="/">Main Menu</a>
</body>
</html>
EOF
exit 0
} # End f_update

f_start_console() # $vm_name
{
	eval $query
	vm_id=${1##*[!0-9]} # Remove name, leaving VM ID
	console_port="8$(printf "%03i" "$vm_id")"
	/vmrc/go/bin/gotty -p $console_port -w service vm attach $vm_name >/dev/null 2>&1 & #|| \
#	{ local gotty_pid="$(ps ax | grep "gotty -p $console_port" | head -1 | cut -d " " -f 1)" ; kill $gotty_pid ; }
	f_status $1	
# NB! Being vmrc NG, should this generate a script that is called?
}

### MAIN ###

timestamp=$( date +%Y%m%d%H%M%S )

f_readconf "/usr/local/etc/vm.conf" || \
	f_500 "/usr/local/etc/vm.conf failed to read"

read request # Passed in by inetd
#i.e. request="/vmrc/vmrcd/edit?vm_name=freebsd0"

# Does inetd ever provide a header? If so, ignore:
#while true; do
#	read header
#	[ "$header" == $'\r' ] && break
#done

# Separate the request into URL, path and query string i.e. GET / HTTP/1.1
url="${request#GET }"		# Chop GET off the front of $url Error check?
url="${url% HTTP/*}"		# Chop HTTP/... off the end of $url
path="${url%%\?*}"		# Chop ?* off the right of $url for the path
query="${url#*\?}"		# Chop ...? off the left of $url for query

case $path in
	/)
		f_main_menu
	;;
	/status|/status/)
		f_status
	;;
	/edit|/edit/)
		f_edit
	;;
	/update)
		[ "$query" = "/update" ] && f_main_menu
		f_update
	;;
	/start)
		[ "$query" = "/start" ] && f_main_menu # Don't start all for now
		eval $query
		service vm start $vm_name >/dev/null 2>&1
		f_start_console $vm_name
		sleep 1 # For no other reason but for status to update
		f_status $vm_name # How would it handle $1 ? Modify?
	;;
	/grub)
		eval $query
		service vm grub $vm_name >/dev/null 2>&1
		f_status $vm_name
	;;
	/install)
		eval $query
		service vm install $vm_name >/dev/null 2>&1
		f_status $vm_name
	;;
	/stop)
		[ "$query" = "/stop" ] && f_main_menu # Don't stop all for now
		eval $query
		service vm stop $vm_name >/dev/null 2>&1
		f_status $vm_name
	;;
	/start_console)
		[ "$query" = "/start_terminal" ] && f_main_menu
		eval $query	
		f_start_console $vm_name
	;;
#	/stop_console)
#		[ "$query" = "/start_terminal" ] && f_main_menu
#		eval $query
#		vm_id=${vm_name##*[!0-9]} # Remove name, leaving VM ID
#		console_port="8$(printf "%03i" "$vm_id")"
#		gotty_pid="$(ps ax | grep "gotty -p $console_port" | head -1 | cut -d " " -f 1)"
#		kill $gotty_pid
#		f_status $vm_name
#	;;
	/css)
cat << EOF
* { font-family: sans-serif; }
body { padding: 20px; }
h1 { font-size: 24px; }
h2 { font-size: 20; }
p { font-size: 18px; }
tr { font-size: 18px; }
/* td { border: 1px solid #333; } */
a { color: #000; }
EOF
exit 0
	;;
	/shell)
echo -e "HTTP/1.1 200 OK\r\n"
cat /vmrc/sdether-josh.js-2921eee/index.html
	;;
	*)
		f_404
	::
esac

